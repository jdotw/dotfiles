version 5.4

" Remove ALL auto-commands.  This avoids having the
" autocommands twice when the vimrc file is sourced again.
autocmd!
filetype on
syntax on

"==============
"   SETTINGS
"==============

set autoindent
set autowrite
set backspace=indent,eol,start
set nobackup
set background=dark
set clipboard=autoselect
set nocompatible
set complete=.,b,u,w,t,i,d " buffers used for lookup in autocompletion
set cinoptions=>2,e0,n0,}0,^0,:2,=2,p2,t0,(2,)30,*40,+2,f0,{0,c2,u2
set cinkeys=0{,0},!^F,o,O,e,*<Return>,0#
set comments=s1:/*,mb:*,el:*/,://,b:#,:%,:XCOMM,nb:>,fb:-
set dictionary=/usr/share/dict/words
set noerrorbells
"set equalprg="indent"
set esckeys
set expandtab
set fileformat=unix
set formatoptions=cqrtl
set helpheight=0
set hidden
set highlight=8r,db,es,hs,mb,Mr,nu,rs,sr,tb,vr,ws
set history=100
set nohlsearch
set ignorecase
set incsearch
" iskeyword=@,48-57,_,192-255   (default)
set iskeyword=@,48-57,_,192-255,-,.,@-@
set nojoinspaces
set keywordprg=dict
set laststatus=2
" lazyredraw:  do not update screen while executing macros
set lazyredraw
" magic: use some magic in search patterns
set magic
" modeline:    ...
" Allow the last few lines to be a modeline - useful when
" the last line in sig gives the preferred textwidth for replies.
set modeline
set modelines=4
set more
set nonumber
set pastetoggle=<F4>
set path=.,/Users/jwilson
set report=0
set norestorescreen
set t_ti= t_te=
set ruler
set scrolloff=0
set shell=/bin/bash
" shiftwidth:  Number of spaces to use for each insertion of (auto)indent.
set shiftwidth=2
" String to put at the start of lines that have been wrapped.
set showbreak="+ "
" showcmd: Show current uncompleted command
set noshowcmd
" showmatch:   Show the matching bracket for the last ')'?
set showmatch
set showmode
set softtabstop=2
set smartcase
set smartindent
set smarttab
" startofline: do not jump to first character with page commands,
" ie keep the cursor in the current column.
set nostartofline
" suffixes: Ignore filename with any of these suffixes
" when using the ":edit" command.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabstop=4
set tildeop
set textwidth=76
set title
set ttyfast
set undolevels=1000  " undoing 1000 changes should be enough :-)
set updatecount=100  " write swap file to disk after each 100 characters
set updatetime=6000  " write swap file to disk after 6 inactive seconds
" viminfo:  What info to store from an editing session
" in the viminfo file;  can be used at next session.
set viminfo=%,'20,\"500,:500,n~/.viminfo
"set visualbell
set whichwrap=<,>,b,s,[,]

if &term =~ "xterm"
    if has("terminfo")
        set t_Co=8
        set t_Sf=[3%p1%dm    
        set t_Sb=[4%p1%dm
    else
        set t_Co=8          " "terminal has eight colors"
        set t_Sb=[4%dm    " escape sequence for background
        set t_Sf=[3%dm    " escape sequence for foreground
    endif
endif

if has("autocmd")
  filetype plugin indent on
endif

" ===================================================================
" Abbreviations
" ===================================================================
source ~/.abbr.vimrc
"
" ===================================================================
" MAPpings
" ===================================================================
"
" Disable the suspend for ^Z.
map <C-Z> :shell
"
" When I let Vim write the current buffer I frequently mistype the
" command ":w" as ":W" - so I have to remap it to correct this typo:
nmap :W :w
nmap :Q :q
nmap :wQ :wq
nmap :WQ :wq
nmap :Wq :wq

map Q gq<CR>
" Don't use Ex mode, use Q for formatting
"
" ===================================================================
" VIM - Editing and updating the vimrc:
" As I often make changes to this file I use these commands
" to start editing it and also update it:
let vimrc='~/.vimrc'
let myabbr='~/.abbr.vimrc'
nn  ,vu :source <C-R>=vimrc<CR><CR>
nn  ,ve :edit   <C-R>=vimrc<CR><CR>
nn  ,vy :edit   <C-R>=myabbr<CR><CR>
" ===================================================================
"
" General Editing
"
"      ;rcm = remove "control-m"s - for those mails sent from DOS:
cmap ;rcm %s/<C-M>//g
"
"     Make whitespace visible:
"     Sws = show whitespace
nmap ,Sws :%s/ /_/g<C-M>
vmap ,Sws :%s/ /_/g<C-M>
"
"     Sometimes you just want to *see* that trailing whitespace:
"     Stws = show trailing whitespace
nmap ,Stws :%s/  *$/_/g<C-M>
vmap ,Stws :%s/  *$/_/g<C-M>
"
" ===================================================================
" General Editing
" ===================================================================
"
"      ,cel = "clear empty lines"
"       - delete the *contents* of all lines which contain only whitespace.
"         note:  this does not uelete lines!
map ,cel :%s/^\s\+$//
"      ,del = "delete 'empty' lines"
"       - delete all lines which contain only whitespace
"         note:  this does *not* delete empty lines!
map ,del :g/^\s\+$/d
"
"      ,cqel = "clear quoted empty lines"
"       Clears (makes empty) all lines which start with '>'
"       and any amount of following spaces.
nmap ,cqel :%s/^[>]\+$//
vmap ,cqel  :s/^[><C-I> ]\+$//
"
"      ,ksr = "kill space runs"
"             substitutes runs of two or more space to a single space:
nmap ,ksr :%s/  \+/ /g
vmap ,ksr  :s/  \+/ /g
"
"    ,Sel = "squeeze empty lines"
"    Convert blocks of empty lines (not even whitespace included)
"    into *one* empty line (within current visual):
map ,Sel :g/^$/,/./-j
"
"    ,Sbl = "squeeze blank lines"
"    Convert all blocks of blank lines (containing whitespace only)
"    into *one* empty line (within current visual):
map ,Sbl :g/^\s*$/,/\S/-j
"
" ===================================================================
" Editing of email replies and Usenet followups - using autocommands
" ===================================================================
"
"
" Part 3 - Change Quoting Level
map ,dp vip:s/^> //<CR>
vmap ,dp    :s/^> //<CR>
"
"      ,qp = "quote current inner paragraph"
map ,qp   vip:s/^/> /<CR>
"
"      ,qp = "quote current paragraph"
vmap ,qp    :s/^/> /<CR>

"      ,kpq "kill power quote"
vmap ,kpq :s/^> *[a-zA-Z]*>/> >/<C-M>
"
"      ,fq "fix quoting"
vmap ,fq :s/^> \([-":}\|][ <C-I>]\)/> > /
"
" Part 5 - Reformatting Text
"
" Formatting the current paragraph according to
" the current 'textwidth' with ^J (control-j):
imap <C-J> <c-o>gqap
map <C-J> gqap
"
"      ,j = join line in commented text
"           (can be used anywhere on the line)
nmap ,j Vjgq
"
" ===================================================================
" Editing your reply
" ===================================================================
"
" Put parentheses around "visual text"
"
"      ,) and ,( :
vmap ,( v`<i(<ESC>`>a)<ESC>
vmap ,) v`<i(<ESC>`>a)<ESC>
vmap ," c""<left><C-R>"<ESC>
"
" remove signatures
"
"     ,kqs = kill quoted sig unto start of own signature:
"map ,kqs G?^> *-- $<CR>d/^-- $/<C-M>
"
" Indent a C file.
nmap ,ci :w<CR>:!indent %<CR>:e!<CR>
nmap ,cci :w<CR>:!astyle --style=ansi %<CR>:e!<CR>
"
" ===================================================================
" HTML
" ===================================================================
" This has become quite big - so I moved it out to another file:
"let FILE=expand("~/.vim/html.vim")
" The "expand" is necessary to evauluate "~".
"if filereadable(FILE)
"    exe "source " . FILE
"endif
"
" ===================================================================
" Useful stuff. :-)
" ===================================================================
"
"     ,E = execute line
map ,E 0/\$<CR>w"yy$:<C-R>y<C-A>r!<C-E>
"
"      ,dr = decode/encode rot13 text
vmap ,dr :!tr A-Za-z N-ZA-Mn-za-m
"
" ===================================================================
" Mapping of special keys - arrow keys and function keys.
" ===================================================================
" Buffer commands (split,move,delete) -
" this makes a little more easy to deal with buffers.
map <F5>  :split<C-M>
map <F6>  :bp<C-M>
map <F7>  :bn<C-M>
map <F8> :bd<C-M>

" <Tab> is bound to `complete'
"inoremap <tab> <c-p>
" 
" cycle fast thru buffers ...
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>
"
" cycle fast thru errors ...
map <m-n> :cn<cr>
map <m-p> :cp<cr>

fun AllIndent()
    let oldLine=line('.')
    normal(gg=G)
    execute ':' . oldLine
endfun
map -- :call AllIndent()<cr> 

"ChangeLog entry convenience
fun InsertChangeLog()
    normal(1G)
    call append(0, strftime("%a %b %d %T %Z %Y") . "  James Wilson <jwilson@lithiumcorp.com>")
    call append(1, "")
    call append(2, "  * ")
    call append(3, "")
    execute ':3'
    normal($)
endfun
map ,cl :call InsertChangeLog()<cr>A

" Toggle fold state between closed and opened.
"
" If there is no fold at current line, just moves forward.
" If it is present, reverse its state.
fun! ToggleFold()
if foldlevel('.') == 0
normal! l
else
if foldclosed('.') < 0
. foldclose
else
. foldopen
endif
endif
" Clear status line
echo
endfun

" Map this function to Space key.
noremap <space> :call ToggleFold()<CR>



" ===================================================================
" AutoCommands
" ===================================================================
"
"
so $VIMRUNTIME/syntax/syntax.vim

augroup cprog
au!
"autocmd BufRead *      set formatoptions=trcql autoindent nocindent comments&
autocmd FileType c,cpp set noautoindent cindent formatoptions=croql shiftwidth=2 softtabstop=2 textwidth=78 wrapmargin=3 
autocmd FileType c,cpp source ~/.vim/my_c_syntax.vim
autocmd FileType c,cpp hi PreProc ctermfg=lightgrey
augroup END

"augroup html
"au!
"autocmd FileType html,php3,php set nocindent autoindent sw=2 ts=8 expandtab
"autocmd FileType html,php3,php source ~/.vim/html_abbr.vim
"augroup END

augroup mail
au!
au BufNewFile,BufRead .letter,mutt*,nn.*,snd.* set tw=72
augroup END
"
" ===================================================================
" TEMPORARY STUFF - TESTING THINGS
" ===================================================================
"
" Some simple example of the "expand modifiers":
" insert the current filename *with* path:
iab _PATHFILE <C-R>=expand("%:p")<cr>
" insert the current filename *without* path:
iab _FILE <C-R>=expand("%:t:r")<cr>
" insert the path of current file:
iab _PATH <C-R>=expand("%:h")<cr>

" this means vim will always jump to the last edited line in a file if poss
autocmd BufEnter *,.* :normal '"

if filereadable(expand("~/.vim/wordlist.vim"))
    source ~/.vim/wordlist.vim
endif
"source ~/.vim/bufexplorer.vim source ~/.vim/word_complete.vim source
"~/.vim/my_syntax.vim
"
"       vim:tw=78 et sw=2 comments=\:\"
